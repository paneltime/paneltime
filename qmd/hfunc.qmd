---
title: C++ heteroskedasticity function syntax guide
format:
  html:
    toc: true
---


If you [define a custom model](custom_model.qmd), you must implement the heteroskedasticity function `h(e, z)` in both Python and C++.

In C++, define the function by assigning a valid string to `self.h_val_cpp` within your custom model class. For example, in the provided model class example, this is accomplished by the assignment:

```python
self.h_val_cpp = 'log(e)'
```

Most of the `paneltime` package is implemented in pure Python, leveraging NumPy's efficient linear algebra routines. However, the iterative computation of ARIMA and GARCH matrices must be executed in C++ to achieve acceptable performance. This includes the evaluation of the heteroskedasticity function.

The C++ expression assigned to `self.h_val_cpp` is parsed and evaluated using the [ExprTk](https://github.com/ArashPartow/exprtk) library. Your expressions must conform to ExprTk syntax, with some adaptations described below.

# ExprTk Syntax Adaptations

You may use the following variables:

* `e`: The residuals.
* `z`: Shape parameter (optional). Is set to maximize the LL if used.
* temporary variables that can be used: `x0`, `x1`, `x2`, `x3`, and `x4`.

Additional rules:

* Python's exponent operator `**` is automatically translated to the C++ equivalent `^`. Other common operators are iden tical in C++ and Python.
* The following functions are supported:

| Function                     | Description             |
| ---------------------------- | ----------------------- |
| `abs(x)`                     | Absolute value          |
| `sqrt(x)`                    | Square root             |
| `log(x)`                     | Natural logarithm       |
| `exp(x)`                     | Exponential             |
| `sin(x)`, `cos(x)`, `tan(x)` | Trigonometric functions |
| `floor(x)`, `ceil(x)`        | Rounding operations     |
| `min(x, y)`, `max(x, y)`     | Minimum / Maximum       |
| `sign(x)`                    | Returns -1, 0, or +1    |


If your function does not depend on `z`, you may omit it and provide empty strings (`''`) for the corresponding derivatives.

# Temporary Variables and Scripting

You can include multiple statements using `;` to separate them. Only the result of the **last** statement is returned.

To maintain consistency with Python syntax, the following automatic substitutions are made before parsing the expression with ExprTk:

* `=` is interpreted as **assignment**, and rewritten to `:=`, the correct ExprTk assignment operator.
* `==` is interpreted as **relaxed equality** (tolerant of small floating-point differences) and rewritten to `=`.

For example, the following code forces the exponent of `(e + z)` to be 4 when its value is â‰¤ 1, and 2 otherwise:

```python
x0 = (e + z)^2; (x0 <= 1) * x0^2 + (x0 > 1) * x0
```

Logical operations (e.g. `and`, `or`, `not`) are not supported. To emulate conditionals, use arithmetic expressions:

```python
x0 * (x0 > 0) + (x0 <= 0) * 1e-18
```

# Reference

ExprTk is a fast C++ mathematical expression parser.

* GitHub: [https://github.com/ArashPartow/exprtk](https://github.com/ArashPartow/exprtk)
* Documentation: [https://www.partow.net/programming/exprtk/](https://www.partow.net/programming/exprtk/)
