---
title: GARCH Heteroskedasticity Function Syntax Guide
format:
  html:
    toc: true
---

This guide explains how to define a custom GARCH heteroskedasticity function in `paneltime` using the option `paneltime.options.h_dict`.

## Defining the Function

The `h_dict` option must be a dictionary containing the following keys:

- `'h'`: the function \( h(e, z) \)
- `'h_e'`: the partial derivative \( \frac{\partial h}{\partial e} \)
- `'h_e2'`: the second derivative \( \frac{\partial^2 h}{\partial e^2} \)
- `'h_z'`: the partial derivative \( \frac{\partial h}{\partial z} \)
- `'h_z2'`: the second derivative \( \frac{\partial^2 h}{\partial z^2} \)
- `'h_e_z'`: the mixed derivative \( \frac{\partial^2 h}{\partial e \partial z} \)

Each entry must be a **string representing a mathematical expression**, not a Python function. The variables `e` and `z` represent the residual and shape parameter, respectively.

As an example, here is an E-GARCH specification that safeguards the input to the logarithmic function to ensure it remains valid:

```python
import paneltime as pt
pt.options.h_dict = {
    'h': 		'x0 = (e + z)^2; x1 = x0*(x0>0) + (x0<=0)*1e-18; log(x1)',
    'h_e': 		'x0 = (e + z);   x1 = x0*(x0!=0) + (x0==0)*1e-18; (x0!=0)*2/x1',
    'h_e2': 	'x0 = (e + z);   x1 = x0*(x0!=0) + (x0==0)*1e-18; -(x0!=0)*2/(x1^2)',
    'h_z': 		'x0 = (e + z);   x1 = x0*(x0!=0) + (x0==0)*1e-18; (x0!=0)*2/x1',
    'h_z2': 	'x0 = (e + z);   x1 = x0*(x0!=0) + (x0==0)*1e-18; -(x0!=0)*2/(x1^2)',
    'h_e_z': 	'x0 = (e + z);   x1 = x0*(x0!=0) + (x0==0)*1e-18; -(x0!=0)*2/(x1^2)'
}
```

These expressions are evaluated in C++ for performance using the [ExprTk](https://github.com/ArashPartow/exprtk) library. Your expressions must follow its syntax with a few custom modifications, described below.

# ExprTk Syntax Adaptations

To align with common Python expectations, we make the following automatic substitutions before passing expressions to the ExprTk parser:

* `=` is interpreted as **assignment**, and automatically rewritten to `:=`, the correct ExprTk assignment operator.
* `==` is interpreted as **relaxed equality** (tolerant of small floating-point differences) and rewritten to `=`.
* `**` is automatically converted to `^` for exponentiation.


Furthermore, logical operations in ExprTk are not supported, as supporting them would require building a reverse Python parser, which is currently not implemented.
Use mathematical expressions like `x0*(x0>0) + (x0<=0)*e-18` in stead.

# Temporary Variables and Scripting

You can perform multiple operations in a single expression using semicolons. Only the result of the **last** statement is returned.

Example:

```
x0 = (e + z)^2; x0 + (x0<=0)*e-18;
```

This computes `x0` as the square of `(e + z)` and returns the log of `x0`.



## Allowed Variables

* `e` – residual
* `z` – shape parameter (optional)
  


### Temporary Variables

You may use the temporary variables: `x0`, `x1`, `x2`, `x3`, and `x4`.

If your function does not depend on `z`, you may omit it and leave the related derivative entries as empty strings (`''`).



---

# Supported Operators

| Operator             | Description                      | Example             |                      |                  |
| -------------------- | -------------------------------- | ------------------- | -------------------- | ---------------- |
| `+`, `-`             | Addition, subtraction            | `x + y - 2`         |                      |                  |
| `*`, `/`, `%`        | Multiplication, division, modulo | `x * y / 2`         |                      |                  |
| `**`, `^`            | Exponentiation                   | `x**2`, `x^2`       |                      |                  |
| `==`, `!=`           | Relaxed equality, inequality     | `x == y`, `x != 0`  |                      |                  |
| `<`, `>`, `<=`, `>=` | Comparisons                      | `x0 = x < y `     |                      |                  |
| `=`                  | Assignment (converted to `:=`)   | `x0 = e^2; log(x0)` |                      |                  |

---

# Built-in Functions

| Function                     | Description             |
| ---------------------------- | ----------------------- |
| `abs(x)`                     | Absolute value          |
| `sqrt(x)`                    | Square root             |
| `log(x)`                     | Natural logarithm       |
| `exp(x)`                     | Exponential             |
| `sin(x)`, `cos(x)`, `tan(x)` | Trigonometric functions |
| `floor(x)`, `ceil(x)`        | Rounding                |
| `min(x, y)`, `max(x, y)`     | Minimum / Maximum       |
| `sign(x)`                    | Returns -1, 0, or +1    |

---


# Reference

ExprTk is a fast C++ mathematical expression parser.

* GitHub: [https://github.com/ArashPartow/exprtk](https://github.com/ArashPartow/exprtk)
* Documentation: [https://www.partow.net/programming/exprtk/](https://www.partow.net/programming/exprtk/)

